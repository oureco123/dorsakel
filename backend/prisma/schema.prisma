generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  role              UserRole @default(USER)
  subscriptionType  SubscriptionType @default(FREE)
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  stripeCustomerId  String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile           UserProfile?
  subscription      Subscription?
  progress          UserProgress[]
  quizAttempts      QuizAttempt[]
  statistics        UserStatistics?
  auditLogs         AuditLog[]

  @@map("users")
}

model UserProfile {
  id            String  @id @default(cuid())
  userId        String  @unique
  firstName     String?
  lastName      String?
  language      String  @default("de")
  timezone      String  @default("Europe/Berlin")
  institution   String?
  specialization String?

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String             @unique
  planType            SubscriptionType
  status              SubscriptionStatus
  startDate           DateTime
  endDate             DateTime?
  stripeSubscriptionId String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentHistory      PaymentHistory[]

  @@map("subscriptions")
}

model PaymentHistory {
  id              String       @id @default(cuid())
  subscriptionId  String
  amount          Float
  currency        String       @default("EUR")
  paymentMethod   String?
  transactionId   String
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime     @default(now())

  subscription    Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payment_history")
}

model MainFolder {
  id           String      @id @default(cuid())
  nameDe       String
  nameEn       String
  descriptionDe String?
  descriptionEn String?
  icon         String?
  orderIndex   Int
  accessLevel  AccessLevel @default(FREE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  subjects     Subject[]

  @@map("main_folders")
}

model Subject {
  id           String      @id @default(cuid())
  folderId     String
  nameDe       String
  nameEn       String
  descriptionDe String?
  descriptionEn String?
  accessLevel  AccessLevel @default(FREE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  folder       MainFolder  @relation(fields: [folderId], references: [id])
  learnCards   LearnCard[]
  quizzes      Quiz[]

  @@map("subjects")
}

model LearnCard {
  id           String      @id @default(cuid())
  subjectId    String
  titleDe      String
  titleEn      String
  contentDe    String
  contentEn    String
  difficulty   Difficulty  @default(BEGINNER)
  tags         String[]
  accessLevel  AccessLevel @default(FREE)
  isPublished  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  subject      Subject     @relation(fields: [subjectId], references: [id])
  mediaFiles   MediaFile[]
  threeDModels ThreeDModel[]
  progress     UserProgress[]

  @@map("learn_cards")
}

model MediaFile {
  id          String    @id @default(cuid())
  cardId      String
  fileType    FileType
  filePath    String
  fileSize    Int
  altTextDe   String?
  altTextEn   String?
  accessLevel AccessLevel @default(FREE)
  createdAt   DateTime  @default(now())

  card        LearnCard @relation(fields: [cardId], references: [id])

  @@map("media_files")
}

model ThreeDModel {
  id            String      @id @default(cuid())
  cardId        String
  modelPath     String
  thumbnailPath String?
  metadata      Json?
  accessLevel   AccessLevel @default(PRO)
  createdAt     DateTime    @default(now())

  card          LearnCard   @relation(fields: [cardId], references: [id])

  @@map("three_d_models")
}

model Quiz {
  id           String      @id @default(cuid())
  subjectId    String
  titleDe      String
  titleEn      String
  descriptionDe String?
  descriptionEn String?
  difficulty   Difficulty  @default(BEGINNER)
  accessLevel  AccessLevel @default(FREE)
  isPublished  Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  subject      Subject     @relation(fields: [subjectId], references: [id])
  questions    QuizQuestion[]
  attempts     QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id            String       @id @default(cuid())
  quizId        String
  questionDe    String
  questionEn    String
  questionType  QuestionType
  options       Json?
  correctAnswer Json
  explanation   Json?
  orderIndex    Int
  createdAt     DateTime     @default(now())

  quiz          Quiz         @relation(fields: [quizId], references: [id])

  @@map("quiz_questions")
}

model QuizAttempt {
  id             String   @id @default(cuid())
  userId         String
  quizId         String
  score          Float
  totalQuestions Int
  answers        Json
  attemptNumber  Int      @default(1)
  completedAt    DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id])
  quiz           Quiz     @relation(fields: [quizId], references: [id])

  @@map("quiz_attempts")
}

model UserProgress {
  userId           String           @id
  cardId           String
  completionStatus CompletionStatus @default(NOT_STARTED)
  lastAccessed     DateTime         @default(now())
  timeSpent        Int              @default(0) // in seconds

  user             User             @relation(fields: [userId], references: [id])
  card             LearnCard        @relation(fields: [cardId], references: [id])

  @@unique([userId, cardId])
  @@map("user_progress")
}

model UserStatistics {
  id                  String   @id @default(cuid())
  userId              String   @unique
  totalCardsViewed    Int      @default(0)
  totalTimeSpent      Int      @default(0) // in seconds
  quizAverageScore    Float    @default(0)
  streakDays          Int      @default(0)
  lastActivityDate    DateTime @default(now())
  monthlyUsage        Json?    // Store monthly usage data
  updatedAt           DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id])

  @@map("user_statistics")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resourceType String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionType {
  FREE
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum AccessLevel {
  FREE
  PRO
  PREMIUM
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  IMAGE_BASED
}

enum CompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
